export HOST=`hostname`
export HOSTNAME="`hostname | sed -e 's,\..*,,'`"
export PAGER="less"
export MANPAGER="less"
export TERM="xterm-color"
export EDITOR=vim
export LESS=FRXe
export PATH="$HOME/my-toolbox:/usr/local/bin:$PATH"
export DOCKER_BUILDKIT=1

export BASH_SILENCE_DEPRECATION_WARNING=1

unset autologout        # don't log me out. please.

# dev aliases
if [[ "$OSTYPE" == "darwin"* ]]; then
  export DIFF=colordiff
else
  export DIFF=diff
fi

alias akacurl='curl -v -s -o/dev/null -H "Pragma: akamai-x-get-cache-key" -H "Pragma: akamai-x-cache-on" -H "Pragma: akamai-x-cache-remote-on" -H "Pragma: akamai-x-get-true-cache-key" '
alias be='bundle exec'
alias bspec='be rspec --format documentation'
alias decrypt=' gpg -u $GPG_EMAIL -d -o - '
alias encrypt=' gpg -e -r $GPG_EMAIL '
alias gc='git commit -a'
alias pick='git cherry-pick'
alias pdiff="$DIFF -ruw -x .svn "
alias pmake='make -f Makefile.local'
alias sourceenv='export $(cat .env | grep -v ^# | xargs)'
alias splitspace="perl -n -e 's/\ /\n/g; print'"
alias joinspace="perl -n -e 's/\n/ /; next if /#/; print'"
alias nospace="perl -pi -e 's/^\ +$|\ +$//g'"
alias venv='. venv/bin/activate'
alias vi='vim'
alias isodate='date "+%Y-%m-%dT%H:%M:%SZ"'
alias pw='rand 24 1'

# macos
alias cleardns='sudo killall -HUP mDNSResponder'


# functions sourced from .bashrc

function cdd() {
    #echo "args: $#"
    dir=''
    if [ $# = 0 ]; then
        dir=$HOME
    else
        dir="$*"
    fi
    builtin cd $dir;
    ls -FC;
    echo '';
}

# Set shell prompt
# based on
# $Id: .bashrc,v 1.5 2004/09/15 16:24:58 psy Exp $
#
# Source: http://www.nothingisreal.com/
#
function prompt {
    local        BLACK="\[\033[0;30m\]"
    local         BLUE="\[\033[0;34m\]"
    local        GREEN="\[\033[0;32m\]"
    local         CYAN="\[\033[0;36m\]"
    local          RED="\[\033[0;31m\]"
    local       PURPLE="\[\033[0;35m\]"
    local        BROWN="\[\033[0;33m\]"
    local   LIGHT_GRAY="\[\033[0;37m\]"
    local    DARK_GRAY="\[\033[1;30m\]"
    local   LIGHT_BLUE="\[\033[1;34m\]"
    local  LIGHT_GREEN="\[\033[1;32m\]"
    local   LIGHT_CYAN="\[\033[1;36m\]"
    local    LIGHT_RED="\[\033[1;31m\]"
    local LIGHT_PURPLE="\[\033[1;35m\]"
    local       YELLOW="\[\033[1;33m\]"
    local        WHITE="\[\033[1;37m\]"
    local    NO_COLOUR="\[\033[0m\]"

    case $TERM in
        xterm*)
            TITLEBAR='\[\033]0;\u@\h:\w\007\]'
            ;;
        *)
            TITLEBAR=""
            ;;
    esac

    case $1 in
        white) PS1="$WHITE\u@\h:$BLACK ";;
        blue)
            PS1="${TITLEBAR}$BLUE[$BLUE\u$BLUE@$BLUE\h$BLUE:$BLACK\w$BLUE]$BLUE\$$BLACK "
            ;;
        red)
            PS1="${TITLEBAR}$RED[$RED\u$RED@$RED\h$RED:$RED\w$RED]$BLACK\$$BLACK "
            ;;
        green)
            PS1="${TITLEBAR}$GREEN[$GREEN\u$GREEN@$GREEN\h$GREEN:$CYAN\w$GREEN]$BLACK\$$BLACK "
            ;;
        brown)
            PS1="${TITLEBAR}$BROWN[$LIGHT_BROWN\u$BROWN@$LIGHT_BROWN\h$BROWN:$LIGHT_CYAN\w$BROWN]$BLACK\$$BLACK "
            ;;
        purple)
            PS1="${TITLEBAR}$PURPLE[$PURPLE\u$PURPLE@$PURPLE\h$PURPLE:$BLACK\w$PURPLE]$BLACK\$$BLACK "
            ;;
        *)
            PS1="[\u@\h:\w]\$ "
            ;;
    esac
    PS2='> '
    PS4='+ '
}
case $HOSTNAME in
     pekmac*)     prompt  red ;;
     workhorse*)  prompt  purple ;;
     linode*)     prompt  green ;;
              *)  prompt  blue ;;
esac


# start up ssh-agent on login
SSH_ENV="$HOME/.ssh/environment.$HOST"

function start_agent {
    export SSH_AUTH_SOCK=${SSH_ENV}.sock
    echo "Initialising new SSH agent..."
    rm -f $SSH_AUTH_SOCK
    /usr/bin/ssh-agent -a "$SSH_AUTH_SOCK" | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    for possiblekey in ${HOME}/.ssh/id_*; do
        if grep -q PRIVATE "$possiblekey"; then
            ssh-add "$possiblekey"
        fi
    done
}

# Source SSH settings, if applicable

if [ ! ${SSH_AGENT_PID} ]; then
  # echo "SSH_ENV = $SSH_ENV"
  # do we have a stale/empty env file?
  if [ -f "${SSH_ENV}" ] && [ ! -s "${SSH_ENV}" ]; then
    echo "found empty ${SSH_ENV}"
    rm -f "${SSH_ENV}"
  fi
  if [ -s "${SSH_ENV}" ]; then
    #cat $SSH_ENV
    . "${SSH_ENV}" > /dev/null
    #ps ${SSH_AGENT_PID} doesn't work under cywgin
    #echo "checking for running ssh-agent: ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent"
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent > /dev/null || {
      start_agent;
    }
  else
    start_agent;
  fi
fi

# no timeout on OSX
function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }

# package managers
[ -s "/opt/homebrew/bin/brew" ] && eval "$(/opt/homebrew/bin/brew shellenv)"

if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi

export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# https://gist.github.com/frnhr/dba7261bcb6970cf6121
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
pyenvVirtualenvUpdatePrompt() {
    RED='\[\e[0;31m\]'
    GREEN='\[\e[0;32m\]'
    BLUE='\[\e[0;34m\]'
    RESET='\[\e[0m\]'
    [ -z "$PYENV_VIRTUALENV_ORIGINAL_PS1" ] && export PYENV_VIRTUALENV_ORIGINAL_PS1="$PS1"
    [ -z "$PYENV_VIRTUALENV_GLOBAL_NAME" ] && export PYENV_VIRTUALENV_GLOBAL_NAME="$(pyenv global)"
    VENV_NAME="$(pyenv version-name)"
    VENV_NAME="${VENV_NAME##*/}"
    GLOBAL_NAME="$PYENV_VIRTUALENV_GLOBAL_NAME"

    # non-global versions:
    COLOR="$BLUE"
    # global version:
    [ "$VENV_NAME" == "$GLOBAL_NAME" ] && COLOR="$RED"
    # virtual envs:
    [ "${VIRTUAL_ENV##*/}" == "$VENV_NAME" ] && COLOR="$GREEN"

    if [ -z "$COLOR" ]; then
        PS1="$PYENV_VIRTUALENV_ORIGINAL_PS1"
    else
        PS1="($COLOR${VENV_NAME}$RESET)$PYENV_VIRTUALENV_ORIGINAL_PS1"
    fi
    export PS1
}

export NVM_DIR="$HOME/.nvm"
# mac is global
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
# or nvm in homedir
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion.d/nvm" ] && \. "$NVM_DIR/bash_completion.d/nvm"


# nvm magic
enter_directory() {
  if [[ $PWD == $PREV_PWD ]]; then
    return
  fi

  if [[ "$PWD" =~ "$PREV_PWD" && ! -f ".nvmrc" ]]; then
    return
  fi

  PREV_PWD=$PWD
  if [[ -f ".nvmrc" ]]; then
    nvm use
    NVM_DIRTY=true
  elif [[ $NVM_DIRTY = true ]]; then
    nvm use default
    NVM_DIRTY=false
  fi
}

export PROMPT_COMMAND="$PROMPT_COMMAND pyenvVirtualenvUpdatePrompt; enter_directory"
