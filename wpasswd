#!/opt/pij/bin/perl
use strict;
use Data::Dump qw( dump );
use Net::LDAP::Class::User::AD;
use Net::LDAP::Class::Group::AD;
use IO::Prompt;

chomp( my $user_name = `whoami` );
my $proper_name = prompt( '-p' => "$user_name first/last name: " );
my $old_pass = prompt( '-e' => '', '-p' => 'Current Windows Password: ' );

my $BASE_DN = 'DC=mpr,DC=org';
my $AD_IP   = 'ldap://mpr.org:389';
#my $AD_IP   = 'ldaps://10.2.2.10';

my $ldap = Net::LDAP->new($AD_IP);
$ldap or die "can't connect to LDAP: $!";

# mangle the CN value
my $cn = $proper_name;
$cn =~ s/^(.+)\ +(.+)$/$2\\, $1/;
my $mesg = $ldap->bind(
    #dn       => "CN=ldap_bind,OU=serviceaccounts,DC=mpr,DC=org",
    dn       => "CN=$cn,OU=Minnesota,OU=People,$BASE_DN",
    password => $old_pass,
    #password => 'tIbbsyf8',
) or die "can't bind";
$mesg->code && die $mesg->error;

{

    package UserClass;
    @UserClass::ISA = qw( Net::LDAP::Class::User::AD );

    UserClass->metadata->setup(
        ldap              => $ldap,
        base_dn           => $BASE_DN,
        attributes        => __PACKAGE__->AD_attributes,
        unique_attributes => __PACKAGE__->AD_unique_attributes,
    );

    sub init_group_class {'GroupClass'}

}

{

    package GroupClass;
    @GroupClass::ISA = qw( Net::LDAP::Class::Group::AD );

    GroupClass->metadata->setup(
        ldap              => $ldap,
        base_dn           => $BASE_DN,
        attributes        => __PACKAGE__->AD_attributes,
        unique_attributes => __PACKAGE__->AD_unique_attributes,
    );

    sub init_user_class {'UserClass'}

}

my $user = UserClass->new( ldap => $ldap, sAMAccountName => $user_name );
if (!$user->read) {
    die "can't find sAMAccountName => $user_name in LDAP\n";
}
dump $user->read()->ldap_entry->dump;

#for ($user->groups) {
#    dump $_->ldap_entry->dump;
#}

warn( " password last set: " . $user->pwd_last_set_localtime . "\n" );
warn( " last logon: " . $user->last_logon_localtime . "\n" );
warn( ' pswd will expire: ' . $user->pwd_will_expire_localtime . "\n" );

# MPR AD doesn't give authz for mortals to change password via ldap.
exit;


my $new_pass  = prompt( '-e' => '', '-p' => 'New Windows Password: ' );
my $new_pass2 = prompt( '-e' => '', '-p' => 'Confirm Windows Password: ' );

if ( $new_pass ne $new_pass2 ) {
    print "Passwords do not match\n";
    exit 2;
}

$user->password($new_pass);
eval { $user->update; };
if ($@) {
    die "unable to save password: $@\n";
}

print "Password saved.\n";
exit 0;
